{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","backgroundColor","winnerColor","value","Board","i","this","squares","squareColors","boardBoxes","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","buttonSelected","slice","length","winner","calculateWinner","colors","finalSquares","setState","concat","col","row","Math","floor","step","move","fontWeight","status","current","moves","map","desc","setBoldButton","jumpTo","player","console","log","boardFilledNoWinner","handleClick","href","id","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1618ed44.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n    <button className=\"square\" onClick={props.onClick} style={{backgroundColor: props.winnerColor}}>\r\n        {props.value}\r\n    </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n        return <Square \r\n            value={this.props.squares[i]} \r\n            onClick={() => this.props.onClick(i)} \r\n            winnerColor={this.props.squareColors[i]}\r\n            />;\r\n    }\r\n  \r\n    render() {\r\n        let boardBoxes = [];\r\n        let j = 0;\r\n        for(let i = 0; i < 3; i++) {\r\n            boardBoxes.push(\r\n                <div key={i} className=\"board-row\">\r\n                    {this.renderSquare(0 + j)}\r\n                    {this.renderSquare(1 + j)}\r\n                    {this.renderSquare(2 + j)}\r\n                </div>\r\n            );\r\n            j += 3;\r\n        }\r\n\r\n        return <div>{boardBoxes}</div>;\r\n\r\n    /*\r\n    return (\r\n        <div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(0)}\r\n                {this.renderSquare(1)}\r\n                {this.renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(3)}\r\n                {this.renderSquare(4)}\r\n                {this.renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(6)}\r\n                {this.renderSquare(7)}\r\n                {this.renderSquare(8)}\r\n            </div>\r\n        </div>\r\n      );\r\n    */\r\n    }\r\n\r\n    \r\n}\r\n  \r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            buttonSelected: 0,\r\n            squareColors: [ \"#fff\", \"#fff\", \"#fff\", \"#fff\", \"#fff\", \"#fff\", \"#fff\", \"#fff\", \"#fff\" ],\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        let winner = calculateWinner(squares);\r\n\r\n        if(squares[i] || winner) {\r\n            return;\r\n        }\r\n\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n        winner = calculateWinner(squares);\r\n        if(winner) {\r\n            const colors = this.state.squareColors.slice();\r\n            colors[winner.finalSquares[0]] = \"#8BFF00\";\r\n            colors[winner.finalSquares[1]] = \"#88FF00\";\r\n            colors[winner.finalSquares[2]] = \"#88FF00\";\r\n            this.setState({\r\n                history: history.concat([{\r\n                    squares: squares,\r\n                    col: i % 3,\r\n                    row: Math.floor(i / 3),\r\n                }]),\r\n                stepNumber: history.length,\r\n                xIsNext: !this.state.xIsNext,\r\n                buttonSelected: this.state.buttonSelected+1,\r\n                squareColors: colors,\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                col: i % 3,\r\n                row: Math.floor(i / 3),\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n            buttonSelected: this.state.buttonSelected+1,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n            buttonSelected: step,\r\n        });\r\n    }\r\n\r\n    setBoldButton(move) {\r\n        // console.log(\"Step: \" + step + \" Move: \" + move);\r\n        return this.state.buttonSelected === move ? {fontWeight: \"bold\"} : {fontWeight: \"normal\"};\r\n    }\r\n\r\n    render() {\r\n    \r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n\r\n        const colors = this.state.squareColors;\r\n\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        // let boldButtonText = {\"font-weight\": \"bold\"};\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? 'Go to move #' + move + ' col: ' + history[move].col + ' row: ' + history[move].row : 'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button style={this.setBoldButton(move)} onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if(winner) {\r\n            status = 'Winner: ' + winner.player;\r\n            console.log(\"winning squares: \" + winner.finalSquares[0] + \" \" + winner.finalSquares[1] + \" \" + winner.finalSquares[2]);\r\n        } else if (boardFilledNoWinner(current.squares)) { // Length 10 when index 9 is filled\r\n            status = 'No Winner!';\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board \r\n                    squares={current.squares}\r\n                    onClick={(i) => this.handleClick(i)}\r\n                    squareColors={colors}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{status}</div>\r\n                <ol>{moves}</ol>\r\n            </div>\r\n            <div className=\"study-page\">\r\n                <a href=\"https://www.jamesmoles.com/study.html\">Study page!</a>\r\n            </div>\r\n            <div id=\"test123\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return { player: squares[a], finalSquares: lines[i].slice() };\r\n      }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction boardFilledNoWinner(squares) {\r\n    for(let i = 0; i < squares.length; i++) {\r\n        if(squares[i] === null)\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n// ========================================\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\nReactDOM.render(<button>Click Me!</button>, document.getElementById('test123'));"],"sourceRoot":""}