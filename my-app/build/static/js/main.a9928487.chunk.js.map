{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","backgroundColor","value","Board","i","this","squares","boardBoxes","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","buttonSelected","slice","length","calculateWinner","setState","concat","col","row","Math","floor","step","move","fontWeight","status","current","winner","moves","map","desc","setBoldButton","jumpTo","boardFilledNoWinner","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9928487.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n    <button className=\"square\" onClick={props.onClick} style={{backgroundColor: \"#8BFF00\"}}>\r\n        {props.value}\r\n    </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n        return <Square \r\n            value={this.props.squares[i]} \r\n            onClick={() => this.props.onClick(i)} \r\n            />;\r\n    }\r\n  \r\n    render() {\r\n        let boardBoxes = [];\r\n        let j = 0;\r\n        for(let i = 0; i < 3; i++) {\r\n            boardBoxes.push(\r\n                <div key={i} className=\"board-row\">\r\n                    {this.renderSquare(0 + j)}\r\n                    {this.renderSquare(1 + j)}\r\n                    {this.renderSquare(2 + j)}\r\n                </div>\r\n            );\r\n            j += 3;\r\n        }\r\n\r\n        return <div>{boardBoxes}</div>;\r\n\r\n    /*\r\n    return (\r\n        <div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(0)}\r\n                {this.renderSquare(1)}\r\n                {this.renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(3)}\r\n                {this.renderSquare(4)}\r\n                {this.renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(6)}\r\n                {this.renderSquare(7)}\r\n                {this.renderSquare(8)}\r\n            </div>\r\n        </div>\r\n      );\r\n    */\r\n    }\r\n\r\n    \r\n}\r\n  \r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            buttonSelected: 0,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if(calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                col: i % 3,\r\n                row: Math.floor(i / 3),\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n            buttonSelected: this.state.buttonSelected+1,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n            buttonSelected: step,\r\n        });\r\n    }\r\n\r\n    setBoldButton(move) {\r\n        // console.log(\"Step: \" + step + \" Move: \" + move);\r\n        return this.state.buttonSelected === move ? {fontWeight: \"bold\"} : {fontWeight: \"normal\"};\r\n    }\r\n\r\n    render() {\r\n    \r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        // let boldButtonText = {\"font-weight\": \"bold\"};\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? 'Go to move #' + move + ' col: ' + history[move].col + ' row: ' + history[move].row : 'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button style={this.setBoldButton(move)} onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if(winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else if (boardFilledNoWinner(current.squares)) { // Length 10 when index 9 is filled\r\n            status = 'No Winner!';\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board \r\n                    squares={current.squares}\r\n                    onClick={(i) => this.handleClick(i)}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{status}</div>\r\n                <ol>{moves}</ol>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction boardFilledNoWinner(squares) {\r\n    for(let i = 0; i < squares.length; i++) {\r\n        if(squares[i] === null)\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n// ========================================\r\n  \r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}